import numpy as np
import random
import math

#Select the most violated pair
def select_pair(F, I_low, I_up,cpt) :
    ma = np.amax(F[I_low])
    mi = np.amin(F[I_up])
   # if cpt % 100 == 0:
       # print math.log(ma - mi,10)
    i_low = np.argwhere(F == ma).flat[0]
    i_up = np.argwhere(F == mi).flat[0]
    #Check for optimality
    if F[i_low,0] <= (F[i_up,0] + 2*tau) :
        return -1, -1
    return i_low, i_up

#Gaussian function
def gaussian(A) :
    return np.exp(-tauGaussian*A)

#Compute the constrain
def constraint(T,Alpha) :
    return np.sum(np.multiply(T, Alpha))

#Computes sets
def indexSets(Alpha,T) : 
    indexes = range(0,Alpha.shape[0])
    #I_00 = ([i for i in indexes if 0<Alpha[i,0] and Alpha[i,0]<C])
    I = np.nonzero(np.logical_and(Alpha[:,0] > 0, Alpha[:,0] < C))
    I_0 = I[0][0].tolist()[0]
    I_p = [i for i in indexes if (T[i,0]==1 and Alpha[i,0]==0) or (T[i,0]==-1 and Alpha[i,0]==C)]
    I_m = [i for i in indexes if (T[i,0]==-1 and Alpha[i,0]==0) or (T[i,0]==1 and Alpha[i,0]==C)]
    I_l, I_u = I_0 + I_m, I_0 + I_p
    
    return (I_l, I_u)

#Compute the criterion
def criterion(Alpha, T,K):
    return (0.5*np.sum(np.sum(np.multiply(np.multiply(Alpha * Alpha.T, T * T.T), K), 0), 1) - np.sum(Alpha, 0))

def computePrediction(Alpha, T, K, Ktest) :
    #Compute b
    S = [i for i in range(0,Alpha.shape[0]) if Alpha[i,0]>0 or Alpha[i,0]<C]
    AT = np.multiply(Alpha, T)
    Y = (AT.T * K).T
    b = np.sum(T - Y) / np.size(S)
    #Compute predictions
    pred = (AT.T * Ktest).T - b
    notCorrect = np.sum(np.multiply(pred, V_l) < 0)
    return notCorrect

def SMO(X,T,V,V_l,tau,tauGaussian,C,K,Ktest) :
    #dimensionality
    d = X.shape[1]
    #size of input
    n = X.shape[0]
    #initialization
    F = np.matrix(-T, dtype=float)
    Alpha = np.asmatrix(np.zeros((n,1)))
    (I_low, I_up) = indexSets(Alpha, T)
    cpt = 0
    nbErrorMin = 10000
    bestIter = 0;
    BestAlpha = Alpha
    while cpt < 500 :
        cpt = cpt + 1
        (i,j) = select_pair(F, I_low, I_up,cpt)
        nbError = computePrediction(Alpha, T, K, Ktest)
        #Keep in memory the best setting of Alpha
        if nbErrorMin > nbError :
            nbErrorMin = nbError
            bestIter = cpt
            BestAlpha = Alpha
        if j == -1 :
            break
        sigma = T[i,0] * T[j,0]
        #compute L,H
        w = Alpha[i,0] + sigma * Alpha[j,0]
        sigmaw = Alpha[j,0] + sigma * Alpha[i,0]
        IL = 0 if sigma == -1 else C
        IH = 0 if sigma == 1 else C
        L = max(0, sigmaw - IL)
        H = min(C, sigmaw + IH)
        alpha_new_j = 0

        rho = K[i,i] + K[j,j] - 2*K[i,j]
        if rho > threshold :
            alpha_unc = Alpha[j,0] + (T[j,0] * (F[i,0] - F[j,0]) / rho)
            if alpha_unc >= L and alpha_unc <= H : 
               alpha_new_j = alpha_unc
            if alpha_unc < L :
               alpha_new_j = L
            if alpha_unc > H :
               alpha_new_j = H
        else : #Second derivative is negative
            L_i = w - sigma * L
            H_i = w - sigma * H
            v_i = F[i,0] + T[i,0] - Alpha[i,0]*T[i,0]*K[i,i] - Alpha[j,0]*T[j,0]*K[i,j]
            v_j = F[j,0] + T[j,0] - Alpha[i,0]*T[i,0]*K[i,j] - Alpha[j,0]*T[j,0]*K[j,j]
            phi_L = 0.5*(K[i,i]*L_i*L_i+K[j,j]*L*L)+sigma*K[i,j]*L_i*L+T[i,0]*L_i*v_i + T[j,0]*L*v_j - L_i - L
            phi_H = 0.5*(K[i,i]*H_i*H_i+K[j,j]*H*H)+sigma*K[i,j]*H_i*H+T[i,0]*H_i*v_i + T[j,0]*H*v_j - H_i - H
            if phi_L > phi_H :
                alpha_new_j = H
            else :
                alpha_new_j = L
        alpha_new_i = Alpha[i,0] + sigma * (Alpha[j,0] - alpha_new_j)
        #update vector F
        F = F + T[i,0] * (alpha_new_i - Alpha[i,0]) * K[:,i] + T[j,0] * (alpha_new_j - Alpha[j,0]) * K[:,j]
        #Update alpha
        Alpha[i,0] = alpha_new_i
        Alpha[j,0] = alpha_new_j
        (I_low, I_up) = indexSets(Alpha,T)
    nbError = computePrediction(BestAlpha, T, K, Ktest)
    #print "Misclassified: ",nbError, " at count ", bestIter, "criterion of", criterion(Alpha, T, K)
    return nbError


