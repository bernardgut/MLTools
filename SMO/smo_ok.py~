import numpy as np
import smo

#Gaussian function
def gaussian(A) :
    return np.exp(-tauGaussian*A)

#Initialize the kernel matrix
def initK(X,Y) :
    XYT = np.asmatrix(X)*np.asmatrix(Y.T)
    XXT = np.asmatrix(X)*np.asmatrix(X.T)
    YYT = np.asmatrix(Y)*np.asmatrix(Y.T)
    dxx = XXT.diagonal().T
    dyy = YYT.diagonal().T
    onesXX = np.asmatrix(np.ones(Y.shape[0])).T
    onesYY = np.asmatrix(np.ones(X.shape[0])).T
    A = 0.5*(dxx*onesXX.T) + 0.5*(onesYY*dyy.T) - XYT
    return gaussian(A)

#Generate all Kernel matrix before experiment
def generateAllMatrices(T_d,V_d,tauGaussian) :
    for i in range (0,10) :
        X,V = T_d[i],V_d[i]
        K = initK(X,X,tauGaussian)
        Ktest = initK(X,V,tauGaussian)
        np.save("./Matrices/K_" + str(tauGaussian) + "_" +str(i), K)
        np.save('./Matrices/Ktest_' + str(tauGaussian) + "_" + str(i), Ktest)

def deleteMatrices() :
    print "delete"

T_d = list()
T_l = list()
V_d = list()
V_l = list()
for i in range(0,10) :
    T_d.append(np.load("./Data_Label/T_d_"+ str(i) + ".npy"))
    T_l.append(np.load("./Data_Label/T_l_"+ str(i) + ".npy"))
    V_d.append(np.load("./Data_Label/V_d_"+ str(i) + ".npy"))
    V_l.append(np.load("./Data_Label/V_l_"+ str(i) + ".npy"))

#Initialize parameters
tau = 10e-8
tauGaussian = 0.001
C = 5
threshold = 10e-15
#Experiments
while tauGaussian < 10e5 :
    #Compute the necessary matrices and save them
    #generateAllMatrices(T_d,T_l,V_d,tauGaussian)
    while C < 10e5 :
        for i in range (2,3) :
            print "generate K's"
            K = initK(T_d[i],T_d[i])
            Ktest = initK(T_d[i],V_d[i])
            print "SMO"
            print smo.SMO(T_d[i],T_l[i],V_d[i],V_l[i],tau,tauGaussian,C,threshold,K,Ktest)
        C = 10e5
    tauGaussian = 10e5     
    #Delete the matrices

